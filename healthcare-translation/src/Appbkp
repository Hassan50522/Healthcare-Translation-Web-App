import React, { useState } from "react";
import { Card, CardContent } from "./components/ui/card";
import { Button } from "./components/ui/button";

const HealthcareTranslationApp = () => {
  const [inputLanguage, setInputLanguage] = useState("en");
  const [outputLanguage, setOutputLanguage] = useState("es");
  const [transcript, setTranscript] = useState("");
  const [translation, setTranslation] = useState("");
  const [isRecording, setIsRecording] = useState(false);

  const startRecording = () => {
    setIsRecording(true);
    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.lang = inputLanguage;
    recognition.interimResults = false;

    recognition.onresult = (event) => {
      const speechResult = event.results[0][0].transcript;
      setTranscript(speechResult);
      translateText(speechResult);
    };

    recognition.onend = () => {
      setIsRecording(false);
    };

    recognition.onerror = (event) => {
      console.error("Speech recognition error:", event.error);
      setIsRecording(false);
    };

    recognition.start();
  };

  const translateText = async (text) => {
    if (!text) return;

    try {
      const response = await fetch("http://localhost:5000/translate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          text,
          source_lang: inputLanguage,
          target_lang: outputLanguage,
        }),
      });

      if (!response.ok) throw new Error(`Server error: ${response.statusText}`);

      const data = await response.json();
      if (data && data.translation) {
        setTranslation(data.translation);
      } else {
        throw new Error("No translation returned from server");
      }
    } catch (error) {
      console.error("Translation Error Details:", error);
      setTranslation("Translation failed. Please check the console for details.");
    }
  };

  const playTranslation = () => {
    if (!translation) return;

    const speechSynthesis = window.speechSynthesis;
    const utterance = new SpeechSynthesisUtterance(translation);

    const langMap = {
      en: "en-US",
      es: "es-ES",
      fr: "fr-FR",
      zh: "zh-CN",
    };
    utterance.lang = langMap[outputLanguage] || "en-US";

    speechSynthesis.speak(utterance);
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-4">
      <h1 className="text-2xl font-bold mb-4">Healthcare Translation Web App</h1>

      <Card className="w-full max-w-md">
        <CardContent>
          <div className="flex flex-col gap-4">
            <div>
              <label className="block text-sm font-medium mb-1">Input Language:</label>
              <select
                value={inputLanguage}
                onChange={(e) => setInputLanguage(e.target.value)}
                className="w-full border rounded p-2"
              >
                <option value="en">English</option>
                <option value="es">Spanish</option>
                <option value="fr">French</option>
                <option value="zh">Chinese</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Output Language:</label>
              <select
                value={outputLanguage}
                onChange={(e) => setOutputLanguage(e.target.value)}
                className="w-full border rounded p-2"
              >
                <option value="es">Spanish</option>
                <option value="en">English</option>
                <option value="fr">French</option>
                <option value="zh">Chinese</option>
              </select>
            </div>

            <Button onClick={startRecording} disabled={isRecording}>
              {isRecording ? "Recording..." : "Start Recording"}
            </Button>

            <div>
              <h2 className="text-lg font-medium">Transcript:</h2>
              <p className="border p-2 rounded bg-white min-h-[50px]">{transcript}</p>
            </div>

            <div>
              <h2 className="text-lg font-medium">Translation:</h2>
              <p className="border p-2 rounded bg-white min-h-[50px]">{translation}</p>
            </div>

            <Button onClick={playTranslation} disabled={!translation}>
              Play Translation
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default HealthcareTranslationApp;
